wait(0.5)
print("Loaded Doors In 0.5 Seconds")

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("Doors", "Serpent")
local CF = CFrame.new
local LatestRoom = game:GetService("ReplicatedStorage").GameData.LatestRoom
local ChaseStart = game:GetService("ReplicatedStorage").GameData.ChaseStart
local Tab = Window:NewTab("Main")
local MainSection = Tab:NewSection("Main")
local Tab = Window:NewTab("Character")
local CharacterSection = Tab:NewSection("Character")
-- NewSection
CharacterSection:NewButton("FullBright", "--", function()
    local Light = game:GetService("Lighting")

function dofullbright()
Light.Ambient = Color3.new(1, 1, 1)
Light.ColorShift_Bottom = Color3.new(1, 1, 1)
Light.ColorShift_Top = Color3.new(1, 1, 1)
end

dofullbright()

Light.LightingChanged:Connect(dofullbright)
end)


MainSection:NewKeybind("--", "--", Enum.KeyCode.X, function()
	Library:ToggleUI()
end)

MainSection:NewButton("Skip Rooms", "Press H for it to work", function()
local Keybind = Enum.KeyCode.H
local CanSkipRoom_50 = true
local CanAutoUnlockDoors = true
local CanPullTheLevers = true
local cooldown = true
local cooldownwait = 0.5

do
	local UIS = game:GetService("UserInputService")
	local CF = CFrame.new
	local LatestRoom = game:GetService("ReplicatedStorage").GameData.LatestRoom

	UIS.InputBegan:Connect(function(input, typing)
    	if typing then return end
    	if input.KeyCode == Keybind then
			if not cooldown then return end
        	pcall(function()
				cooldown = false
            	local key = false
				local lever = false
            	local CurrentDoor = workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:WaitForChild("Door")
            	for _,object in ipairs(CurrentDoor.Parent:GetDescendants()) do
                	if object.Name == "KeyObtain" then
                    	key = object
                	end
            	end
				for _,object in ipairs(CurrentDoor.Parent:GetDescendants()) do
                	if object.Name == "LeverForGate" then
                    	lever = object
                	end
            	end
            	if LatestRoom.Value == 50 and CanSkipRoom_50 == true then
                	CurrentDoor = workspace.CurrentRooms[tostring(LatestRoom.Value + 1)]:WaitForChild("Door")
                	game.Players.LocalPlayer.Character:PivotTo(CF(CurrentDoor.Door.Position))
            	else
                	if key and CanAutoUnlockDoors == true then
                    	game.Players.LocalPlayer.Character:PivotTo(CF(key.Hitbox.Position))
                    	task.wait(.3)
                    	fireproximityprompt(key.ModulePrompt)
                    	task.wait(.3)
                    	game.Players.LocalPlayer.Character:PivotTo(CF(CurrentDoor.Door.Position))
						task.wait(.3)
                    	fireproximityprompt(CurrentDoor.Lock.UnlockPrompt)
                	end
					if lever and CanPullTheLevers == true then
						game.Players.LocalPlayer.Character:PivotTo(CF(lever.Main.Position))
						task.wait(.3)
						fireproximityprompt(lever.ActivateEventPrompt)
						task.wait(.3)
						game.Players.LocalPlayer.Character:PivotTo(CF(CurrentDoor.Door.Position))
					end
                	game.Players.LocalPlayer.Character:PivotTo(CF(CurrentDoor.Door.Position))
            	end
            	task.wait(.45)
            	CurrentDoor.ClientOpen:FireServer()
				task.wait(cooldownwait)
				cooldown = true
        	end)
    	end
	end)
end
end)




CharacterSection:NewToggle("WalkSpeed 30", "--", function(state)
    if state then
        getgenv().Walk = true;
        while wait() do
            if getgenv().Walk == true then
               game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 30
            end
       end
    else
        getgenv().Walk = false;
        while wait() do
            if getgenv().Walk == true then
               game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 30
            end
       end
    end
end)

MainSection:NewButton("No Jumpscares", "--", function()
    game:GetService("ReplicatedStorage").Bricks.Jumpscare:Destroy()
end)



MainSection:NewButton("Key Esp", "--", function()
    local function ApplyKeyChams(inst)
        wait()
        local Cham = Instance.new("Highlight")
        Cham.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
        Cham.FillColor = Color3.new(0.980392, 0.670588, 0)
        Cham.FillTransparency = 0.5
        Cham.OutlineColor = Color3.new(0.792156, 0.792156, 0.792156)
        Cham.Parent = game:GetService("CoreGui")
        Cham.Adornee = inst
        Cham.Enabled = OrionLib.Flags["KeyToggle"].Value
        Cham.RobloxLocked = true
        return Cham
    end
    
    local KeyCoroutine = coroutine.create(function()
        workspace.CurrentRooms.DescendantAdded:Connect(function(inst)
            if inst.Name == "KeyObtain" then
                table.insert(KeyChams,ApplyKeyChams(inst))
            end
        end)
    end)
    for i,v in ipairs(workspace:GetDescendants()) do
        if v.Name == "KeyObtain" then
            table.insert(KeyChams,ApplyKeyChams(v))
        end
    end
    coroutine.resume(KeyCoroutine)
    
end)

local pcl = Instance.new("SpotLight")
pcl.Brightness = 1
pcl.Face = Enum.NormalId.Front
pcl.Range = 90
pcl.Parent = game.Players.LocalPlayer.Character.Head
pcl.Enabled = false


CharacterSection:NewToggle("Headlight (Not Working)", "--", function(state)
    if state then
        pcl.Enabled = Value
    else
        pcl.Disbaled = Value
    end
end)
